// Generated by view binder compiler. Do not edit!
package com.vedantlaheri.videon.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.imageview.ShapeableImageView;
import com.vedantlaheri.videon.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ThemeViewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ShapeableImageView themeBlack;

  @NonNull
  public final ShapeableImageView themeBlue;

  @NonNull
  public final ShapeableImageView themeGreen;

  @NonNull
  public final ShapeableImageView themePurple;

  @NonNull
  public final ShapeableImageView themeRed;

  private ThemeViewBinding(@NonNull LinearLayout rootView, @NonNull ShapeableImageView themeBlack,
      @NonNull ShapeableImageView themeBlue, @NonNull ShapeableImageView themeGreen,
      @NonNull ShapeableImageView themePurple, @NonNull ShapeableImageView themeRed) {
    this.rootView = rootView;
    this.themeBlack = themeBlack;
    this.themeBlue = themeBlue;
    this.themeGreen = themeGreen;
    this.themePurple = themePurple;
    this.themeRed = themeRed;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ThemeViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ThemeViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.theme_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ThemeViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.themeBlack;
      ShapeableImageView themeBlack = ViewBindings.findChildViewById(rootView, id);
      if (themeBlack == null) {
        break missingId;
      }

      id = R.id.themeBlue;
      ShapeableImageView themeBlue = ViewBindings.findChildViewById(rootView, id);
      if (themeBlue == null) {
        break missingId;
      }

      id = R.id.themeGreen;
      ShapeableImageView themeGreen = ViewBindings.findChildViewById(rootView, id);
      if (themeGreen == null) {
        break missingId;
      }

      id = R.id.themePurple;
      ShapeableImageView themePurple = ViewBindings.findChildViewById(rootView, id);
      if (themePurple == null) {
        break missingId;
      }

      id = R.id.themeRed;
      ShapeableImageView themeRed = ViewBindings.findChildViewById(rootView, id);
      if (themeRed == null) {
        break missingId;
      }

      return new ThemeViewBinding((LinearLayout) rootView, themeBlack, themeBlue, themeGreen,
          themePurple, themeRed);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
